<?php
/**
 * Custom Walker
 *
 * @access      public
 * @since       1.0
 * @return      void
 */
class header_mobile_walker extends Walker_Nav_Menu
{
    // News item id = 24319
    private $checkParent;
    private $menu_id;
    private $parentArray = [24319];

    public function start_lvl(&$output, $depth = 0, $args = array() ) {
        if (in_array($this->menu_id, $this->parentArray) || $depth == 0){
            $indent = str_repeat("\t", $depth);
            $output .= "\n$indent<ul class=\"sub-menu\">\n";
        } else {
            return;
        }

    }

    public function start_el(&$output, $item, $depth = 0, $args = array(), $id = 0){
        global $wp_query;
        $indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';

        $check_parent = $item->menu_item_parent;

        $this->checkParent = in_array($check_parent, $this->parentArray) ? true : false;
        $this->menu_id = $item->ID;


        /**
         * Looks for menus within menu items
         */
        $taxonomyQueryVar = self::get_query_var($item->url, 'taxonomy');
        $termQueryVar = $taxonomyQueryVar === 'nav_menu' ? self::get_query_var($item->url, 'term') : null;
        $submenuID = !is_null($termQueryVar) ? $termQueryVar : null;
        if ($depth > 0 && !is_null($submenuID)) {
            $menu_term_id = get_term_by('slug', $submenuID, 'nav_menu');
            $menu_term_id = $menu_term_id !== false ? $menu_term_id : null;
            if(!is_null($menu_term_id)) {
                $menu_obj = wp_nav_menu([
                    'menu' => $menu_term_id,
                    'echo' => false,
                    'container' => false,
                    'items_wrap' => '%3$s',
                    'walker' => new header_mobile_walker(),
                ]);
                $output .= $menu_obj;
            }
        }else {


            if ($this->checkParent) {
                array_push($this->parentArray, $item->ID);
            }

            $class_names = $value = '';

            if ($item->title === 'About' || $item->title === 'Careers' || $item->title === 'Give') {
                array_push($item->classes, 'desktop-hide');
            }

            $classes = empty($item->classes) ? array() : (array)$item->classes;

            $class_names = join(' ', apply_filters('nav_menu_css_class', array_filter($classes), $item));
            $class_names = ' class="' . esc_attr($class_names) . '"';
            $iurl = trim($item->url, '/');
            $segments = explode('/', $iurl);
            $slug = array_pop($segments);
            $output .= $indent . '<li data-menuid="' . $item->ID . '"' . $value . $class_names . ' data-label="' . $slug . '">';

            //$icon = $args->walker->has_children == true ? '<i class="submenu-toggle"></i>' : '';

            $attributes = !empty($item->attr_title) ? ' title="' . esc_attr($item->attr_title) . '"' : '';
            $attributes .= !empty($item->target) ? ' target="' . esc_attr($item->target) . '"' : '';
            $attributes .= !empty($item->xfn) ? ' rel="' . esc_attr($item->xfn) . '"' : '';
            $attributes .= !empty($item->url) ? ' href="' . esc_attr($item->url) . '"' : '';
            $attributes .= !empty($item->ID) ? ' data-id="' . esc_attr($item->ID) . '"' : '';

            $item_output = $args->before;
            $item_output .= '<a' . $attributes . '>';
            $item_output .= $args->link_before . apply_filters('the_title', $item->title, $item->ID) . $args->link_after;
            $item_output .= '</a>';
            //$item_output .= $icon;
            $item_output .= $args->after;

            $output .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
        }
    }

    public function title_to_slug($title) {
        $slug = preg_replace('/\s/', '-', strtolower($title));
        return $slug;
    }


    public function get_menu_parent($post_id){
        $menu_items = wp_get_nav_menu_items('main');
        $parent_item_id = wp_filter_object_list( $menu_items, array( 'object_id' => $post_id ), 'and', 'menu_item_parent' );

        if ( ! empty( $parent_item_id ) ) {
            $parent_item_id = array_shift( $parent_item_id );
            $parent_post_id = wp_filter_object_list( $menu_items, array( 'ID' => $parent_item_id ), 'and', 'object_id' );

            if ( ! empty( $parent_post_id ) ) {
                $parent_post_id = array_shift( $parent_post_id );
                return get_post( $parent_post_id )->post_id;
            }
        }
        return false;
    }


    public function end_lvl(&$output, $depth = 0, $args = array())
    {
        if (in_array($this->menu_id, $this->parentArray) || $depth == 0){
            parent::end_lvl($output, $depth, $args); // TODO: Change the autogenerated stub
        } else {
            return;
        }
    }

    private static function get_query_var($url, $var){
        $parts = parse_url($url);
        if(isset($parts['query'])){
            parse_str($parts['query'], $query);
            return isset($query[$var]) ? $query[$var] : '';
        }else{
            return '';
        }
    }
}
